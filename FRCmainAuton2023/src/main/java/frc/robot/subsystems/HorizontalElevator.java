// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import com.revrobotics.RelativeEncoder;
import com.revrobotics.SparkMaxLimitSwitch;
import com.revrobotics.SparkMaxLimitSwitch.Type;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants;
import com.revrobotics.CANSparkMax.IdleMode;


/**
 *
 */
public class HorizontalElevator extends SubsystemBase {

    private CANSparkMax horizontalElevatorLead;
    private CANSparkMax horizontalElevattorFollow;

    private SparkMaxLimitSwitch forwardLimit;
    private SparkMaxLimitSwitch reverseLimit;

    private double power = 0.1;

    /**
    *
    */
    public RelativeEncoder encoderHE;
    private double targetPosition;
    private double error = .01;

    public HorizontalElevator() {

        horizontalElevatorLead = new CANSparkMax(7, MotorType.kBrushless);
        horizontalElevatorLead.restoreFactoryDefaults();
        horizontalElevatorLead.setIdleMode(IdleMode.kBrake);
        horizontalElevatorLead.setInverted(false);

        horizontalElevattorFollow = new CANSparkMax(8, MotorType.kBrushless);
        horizontalElevattorFollow.restoreFactoryDefaults();
        horizontalElevattorFollow.setIdleMode(IdleMode.kBrake);
        horizontalElevattorFollow.follow(horizontalElevatorLead, false);

        forwardLimit = horizontalElevatorLead.getForwardLimitSwitch(SparkMaxLimitSwitch.Type.kNormallyOpen);
        reverseLimit = horizontalElevatorLead.getReverseLimitSwitch(SparkMaxLimitSwitch.Type.kNormallyOpen);

        forwardLimit.enableLimitSwitch(true);
        reverseLimit.enableLimitSwitch(true);

        encoderHE = horizontalElevatorLead.getEncoder();

    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        SmartDashboard.putNumber("Horizontal Elevator Position", encoderHE.getPosition());
        SmartDashboard.putNumber("Horizontal Velocity Position", encoderHE.getVelocity());

        SmartDashboard.putBoolean("HEForward Limit Switch", forwardLimit.isPressed());
        SmartDashboard.putBoolean("HEReverse Limit Switch", reverseLimit.isPressed());

        SmartDashboard.putNumber("HE Target Position", targetPosition);
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void HEExtend() {
        horizontalElevatorLead.set(power);
    }

    public void HERetract() {
        horizontalElevatorLead.set(-power);
    }

    public void HEStop() {
        horizontalElevatorLead.stopMotor();
    }

    public boolean isHERetracted() {
        return horizontalElevatorLead.getReverseLimitSwitch(Type.kNormallyOpen).isPressed();
    }

    public boolean isHEExtended() {
        return horizontalElevatorLead.getForwardLimitSwitch(Type.kNormallyOpen).isPressed();
    }

    public void HEGoTo(Constants.PlacementConstants.PlacementPosition position) {
        Constants.PlacementConstants temp = new Constants.PlacementConstants();
        targetPosition = temp.getPlacementValues(position, Constants.PlacementConstants.SubSystem.HORIZONTAL);

        if (encoderHE.getPosition() > targetPosition) {
            HERetract();

        } else if (encoderHE.getPosition() < targetPosition) {

            HEExtend();
        }

    }

    public boolean isHEAtPosition() {

        return Math.abs(encoderHE.getPosition() - targetPosition) <= error;
    }

}
