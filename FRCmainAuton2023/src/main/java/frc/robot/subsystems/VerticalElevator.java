// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import frc.robot.Constants;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import java.util.*;

import com.revrobotics.CANSparkMax;
import com.revrobotics.RelativeEncoder;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import com.revrobotics.SparkMaxLimitSwitch.Type;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DutyCycleEncoder;
import edu.wpi.first.wpilibj.Encoder;

/**
 *
 */
public class VerticalElevator extends SubsystemBase {

    private CANSparkMax leadMotor;
    private CANSparkMax followMotor;

    public RelativeEncoder encoderVE;
    private double error = .005;
    private double targetPosition;
    public DutyCycleEncoder throughBorVE;
    private Double ratePower = 0.1;
    public Encoder relativeEncoderVE;
    private int elevatorError;

    public VerticalElevator() {

        leadMotor = new CANSparkMax(6, MotorType.kBrushless);
        leadMotor.restoreFactoryDefaults();
        leadMotor.setInverted(true);
        encoderVE = leadMotor.getEncoder();
        leadMotor.setSmartCurrentLimit(2);

        followMotor = new CANSparkMax(7, MotorType.kBrushless);
        followMotor.restoreFactoryDefaults();
        followMotor.follow(leadMotor, false);
        followMotor.setSmartCurrentLimit(2);

        throughBorVE = new DutyCycleEncoder(1);

        relativeEncoderVE = new Encoder(3, 2);
        relativeEncoderVE.setReverseDirection(true);

    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

        SmartDashboard.putNumber("VEEncoder", encoderVE.getPosition());
        SmartDashboard.putNumber("ThroughBorVE", throughBorVE.getAbsolutePosition());
        SmartDashboard.putNumber("RelativeEncoderVE", relativeEncoderVE.get());
        SmartDashboard.putNumber("Target Position", targetPosition);
        SmartDashboard.putNumber("ElevatorError", elevatorError);
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void VEUp() {

        leadMotor.set(ratePower);
    }

    public void VEDown() {
        leadMotor.set(-ratePower);
    }

    public void VEStop() {
        leadMotor.stopMotor();
    }

    public boolean isVEAtTop() {
        return leadMotor.getForwardLimitSwitch(Type.kNormallyOpen).isPressed();

    }

    public boolean isVEAtBottom() {
        return leadMotor.getReverseLimitSwitch(Type.kNormallyOpen).isPressed();
    }

    public void VEGoTo(Constants.PlacementConstants.PlacementPosition position) {
        Constants.PlacementConstants temp = new Constants.PlacementConstants();
        targetPosition = (temp.getPlacementValues(position, Constants.PlacementConstants.SubSystem.VERTICAL)
                + elevatorError);

        if (relativeEncoderVE.get() < targetPosition) {
            VEDown();

        } else if (relativeEncoderVE.get() > targetPosition) {

            VEUp();
        }

    }

    public boolean isVEAtPosition() {

        return Math.abs(relativeEncoderVE.get() - targetPosition) <= error;
    }

    public void zeroElevator() {
        if (isVEAtBottom() != true) {
            VEDown();
        }
        elevatorError = relativeEncoderVE.get();
    }

}
