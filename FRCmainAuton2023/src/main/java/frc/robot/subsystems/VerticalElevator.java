// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.Constants;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import java.util.*;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.revrobotics.CANSparkMax; 
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import edu.wpi.first.wpilibj.DigitalInput;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class VerticalElevator extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private CANSparkMax cANSparkMAXV1;
private CANSparkMax cANSparkMAXV2;
private DigitalInput vElimitUp;
private DigitalInput vElimitDown;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    

    public VerticalElevator() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
cANSparkMAXV1 = new CANSparkMax(6, MotorType.kBrushless);
 
 

cANSparkMAXV2 = new CANSparkMax(7, MotorType.kBrushless);
 
 

vElimitUp = new DigitalInput(0);
 addChild("VElimitUp", vElimitUp);
 

vElimitDown = new DigitalInput(1);
 addChild("VElimitDown", vElimitDown);
 


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    cANSparkMAXV2.follow(cANSparkMAXV1);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void VEUp(Constants.PlacementConstants.PlacementPosition position) {
        Constants.PlacementConstants temp = new Constants.PlacementConstants();

        double output = 0;

        output = temp.getPlacementValues(position, Constants.PlacementConstants.SubSystem.VERTICAL);

        cANSparkMAXV1.set(output);
    }

    public void VEDown() {
        cANSparkMAXV1.set(-0.5);
    }

    public void VEStop() {
        cANSparkMAXV1.set(0);
    }

    public boolean isVEAtTop(){
        return cANSparkMAXV1.getForwardLimitSwitch(Type.kNormallyOpen).isPressed();
    
    }

    public boolean isVEAtBottom(){
        return cANSparkMAXV1.getReverseLimitSwitch(Type.kNormallyOpen).isPressed();
    }

   


}

